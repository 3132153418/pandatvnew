package com.jiyun.com.day07_greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_COLLECT_BEAN".
*/
public class VideoCollectBeanDao extends AbstractDao<VideoCollectBean, Long> {

    public static final String TABLENAME = "VIDEO_COLLECT_BEAN";

    /**
     * Properties of entity VideoCollectBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "title");
        public final static Property Url = new Property(2, String.class, "url", false, "url");
        public final static Property Urltwo = new Property(3, String.class, "urltwo", false, "urltwo");
        public final static Property Time = new Property(4, String.class, "time", false, "time");
        public final static Property Img = new Property(5, String.class, "img", false, "img");
        public final static Property Bb = new Property(6, boolean.class, "bb", false, "bb");
        public final static Property Rb = new Property(7, boolean.class, "rb", false, "rb");
    }


    public VideoCollectBeanDao(DaoConfig config) {
        super(config);
    }
    
    public VideoCollectBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_COLLECT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"title\" TEXT," + // 1: title
                "\"url\" TEXT," + // 2: url
                "\"urltwo\" TEXT," + // 3: urltwo
                "\"time\" TEXT," + // 4: time
                "\"img\" TEXT," + // 5: img
                "\"bb\" INTEGER NOT NULL ," + // 6: bb
                "\"rb\" INTEGER NOT NULL );"); // 7: rb
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_COLLECT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoCollectBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        String urltwo = entity.getUrltwo();
        if (urltwo != null) {
            stmt.bindString(4, urltwo);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(6, img);
        }
        stmt.bindLong(7, entity.getBb() ? 1L: 0L);
        stmt.bindLong(8, entity.getRb() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoCollectBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        String urltwo = entity.getUrltwo();
        if (urltwo != null) {
            stmt.bindString(4, urltwo);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(6, img);
        }
        stmt.bindLong(7, entity.getBb() ? 1L: 0L);
        stmt.bindLong(8, entity.getRb() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VideoCollectBean readEntity(Cursor cursor, int offset) {
        VideoCollectBean entity = new VideoCollectBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // urltwo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // img
            cursor.getShort(offset + 6) != 0, // bb
            cursor.getShort(offset + 7) != 0 // rb
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoCollectBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUrltwo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImg(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBb(cursor.getShort(offset + 6) != 0);
        entity.setRb(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VideoCollectBean entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VideoCollectBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VideoCollectBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
